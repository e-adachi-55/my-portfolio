{"version":3,"sources":["assets/img/no-profile.png","assets/img/myphoto.jpg","dataset.js","components/AnswersList.jsx","components/Answer.jsx","components/Chats.jsx","components/Chat.jsx","components/Forms/FormDialog.jsx","components/Forms/TextInput.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","defaultDataset","answers","content","nextId","question","AnswersList","props","className","map","value","index","key","toString","select","useStyles","makeStyles","createStyles","borderColor","color","fontWeight","marginBottom","backgroundColor","Answer","classes","Button","button","variant","onClick","height","padding","overflow","Chats","List","chats","id","chat","text","type","Chat","isQuestion","ListItem","ListItemAvatar","Avatar","alt","src","BotIcon","UserIcon","FormDialog","inputName","event","setState","name","target","inputEmail","email","inputDescription","description","submitForm","payload","state","discription","fetch","method","body","JSON","stringify","then","alert","handleClose","bind","Dialog","open","this","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","label","multiline","rows","onChange","DialogActions","autoFocus","React","Component","TextInput","TextField","fullWidth","margin","App","displayNextQuestion","nextQuestionId","push","dataset","currentId","selectAnswer","selectedAnswer","setTimeout","handleClickOpen","test","a","document","createElement","href","click","scrollArea","getElementById","scrollTop","scrollHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bca6d521.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-profile.a990286c.png\";","module.exports = __webpack_public_path__ + \"static/media/myphoto.3ef7d1c8.jpg\";","const defaultDataset = {\r\n    \"init\": {\r\n        answers: [\r\n            {content: \"ポートフォリオを見たい\", nextId: \"https://e-adachi.com/\"},\r\n            {content: \"GitHubを見たい\", nextId: \"https://github.com/e-adachi-55\"},\r\n            {content: \"足立絵己子について詳しく知りたい\", nextId: \"details\"},\r\n            {content: \"その他\", nextId: \"other\"}\r\n        ],\r\n        question: \"こんにちは！足立絵己子へのご用件はなんでしょうか？\",\r\n    },\r\n    \"details\": {\r\n        answers: [\r\n            {content: \"noteが見たい\", nextId: \"https://note.com/dati\"},\r\n            {content: \"どんなことを勉強していますか\", nextId: \"study\"},\r\n            {content: \"どんなことが好きですか\", nextId: \"like\"},\r\n            {content: \"最初の質問に戻る\", nextId: \"init\"}\r\n        ],\r\n        question: \"興味を持っていただき、ありがとうございます！どんなことを知りたいですか？\",\r\n    },\r\n    \"study\": {\r\n        answers: [\r\n            {content: \"最初の質問に戻る\", nextId: \"init\"}\r\n        ],\r\n        question: \"HTML/CSS・JavaScript・PHPを中心に学習中です。最近はReactに興味津々です。\",\r\n    },\r\n    \"like\": {\r\n        answers: [\r\n            {content: \"好きな食べ物は何ですか\", nextId: \"like__food\"},\r\n            {content: \"最初の質問に戻る\", nextId: \"init\"}\r\n        ],\r\n        question: \"食べることが大好きです。最近自炊することが増えてきてお料理も楽しむようになりました！\",\r\n    },\r\n    \"like__food\": {\r\n        answers: [\r\n            {content: \"最初の質問に戻る\", nextId: \"init\"}\r\n        ],\r\n        question: \"お鍋とプリンが好きです。夏場でも鍋を食べる日もあります　笑\",\r\n    },\r\n    \"other\": {\r\n        answers: [\r\n            {content: \"問い合わせる\", nextId: \"contact\"},\r\n            {content: \"最初の質問に戻る\", nextId: \"init\"}\r\n        ],\r\n        question: \"その他についてですね。コチラからお問い合わせできます。\",\r\n    },\r\n}\r\n\r\nexport default defaultDataset","import React from 'react'\r\nimport {Answer} from './index'\r\n\r\nconst AnswersList = (props) => {\r\n  return (\r\n    <div className=\"c-grid__answer\">\r\n      {props.answers.map((value, index) => {\r\n        return <Answer content={value.content} nextId={value.nextId} key={index.toString()} select={props.select} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnswersList","import React from 'react';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(() => (\r\n  createStyles({\r\n        \"button\": {\r\n            borderColor: '#FFB549',\r\n            color: '#FFB549',\r\n            fontWeight: 600,\r\n            marginBottom: '8px',\r\n            \"&:hover\": {\r\n                backgroundColor: '#FFB549',\r\n                color: '#fff'\r\n            }\r\n        }\r\n     }) \r\n));\r\n\r\nconst Answer = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Button \r\n      className={classes.button}\r\n      variant=\"outlined\" onClick={() => props.select(props.content,props.nextId)} >\r\n      {props.content}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default Answer\r\n","import React from 'react';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport {Chat} from \"./index\"\r\n\r\nconst useStyles = makeStyles(() => (\r\n   createStyles({\r\n    \"chats\": {\r\n      height: 400,\r\n      padding: '0',\r\n      overflow: 'auto'\r\n    }\r\n  })\r\n));\r\n\r\nconst Chats = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <List className={classes.chats} id={\"scroll-area\"}>\r\n      {props.chats.map((chat,index) => {\r\n        return <Chat text={chat.text} type={chat.type} key={index.toString()} />\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default Chats","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport UserIcon from '../assets/img/no-profile.png'\r\nimport BotIcon from '../assets/img/myphoto.jpg'\r\n\r\nconst Chat = (props) => {\r\n  const isQuestion = (props.type === 'question');\r\n  const classes = isQuestion ? 'p-chat__row' : 'p-chat__reverse';\r\n\r\n  return (\r\n    <ListItem className={classes}>\r\n      <ListItemAvatar>\r\n        {isQuestion ? (\r\n          <Avatar alt=\"icon\" src={BotIcon} />\r\n          ) : (\r\n          <Avatar alt=\"icon\" src={UserIcon} />\r\n        )}\r\n      </ListItemAvatar>\r\n      <div className=\"p-chat__bubble\">{props.text}</div>\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport default Chat","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {TextInput} from \"../index\"\r\n\r\nexport default class FormDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          name: \"\",\r\n          email: \"\",\r\n          description: \"\"\r\n        }\r\n\r\n        this.inputName = this.inputName.bind(this)\r\n        this.inputEmail = this.inputEmail.bind(this)\r\n        this.inputDescription = this.inputDescription.bind(this)\r\n    }\r\n    \r\n    inputName = (event) => {\r\n      this.setState({ name: event.target.value })\r\n    }\r\n\r\n    inputEmail = (event) => {\r\n      this.setState({ email: event.target.value })\r\n    }\r\n    inputDescription = (event) => {\r\n      this.setState({ description: event.target.value })\r\n    }\r\n\r\n    submitForm = () => {\r\n      const name = this.state.name\r\n      const email = this.state.email\r\n      const discription = this.state.discription\r\n\r\n      const payload = {\r\n        text: 'お問い合わせがありました\\n' +\r\n              'お名前:' + name + '\\n' +\r\n              'Email:' + email + '\\n' +\r\n              'お問い合わせ内容:\\n' + discription\r\n      }\r\n\r\n      const url = \"https://hooks.slack.com/services/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\"\r\n\r\n      fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify(payload)\r\n      }).then(() => {\r\n        alert('送信が完了しました！しばらくお待ちください')\r\n        this.setState({\r\n          name: \"\",\r\n          email: \"\",\r\n          description: \"\"\r\n        })\r\n        return this.props.handleClose()\r\n      })\r\n  }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Dialog\r\n        open={this.props.open}\r\n        onClose={this.props.handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">お問い合わせ用フォーム</DialogTitle>\r\n        <DialogContent>\r\n          <TextInput\r\n            label={\"お名前（必須）\"}\r\n            multiline={false}\r\n            rows={1}\r\n            value={this.state.name}\r\n            type={\"text\"}\r\n            onChange={this.inputName}\r\n          />\r\n\r\n          <TextInput\r\n            label={\"メールアドレス（必須）\"}\r\n            multiline={false}\r\n            rows={1}\r\n            value={this.state.email}\r\n            type={\"email\"}\r\n            onChange={this.inputEmail}\r\n          />\r\n\r\n          <TextInput\r\n            label={\"お問い合わせ内容（必須）\"}\r\n            multiline={true}\r\n            rows={5}\r\n            value={this.state.description}\r\n            type={\"text\"}\r\n            onChange={this.inputDescription}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={this.props.handleClose} color=\"primary\">\r\n            キャンセル\r\n          </Button>\r\n          <Button onClick={this.submitForm} color=\"primary\" autoFocus>\r\n            送信する\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog> \r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst TextInput = (props) => {\r\n  return (\r\n    <TextField\r\n      fullWidth={true}\r\n      label={props.label}\r\n      margin={\"dense\"}\r\n      multiline={props.multiline}\r\n      rows={props.rows}\r\n      value={props.value}\r\n      type={props.type}\r\n      onChange={props.onChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextInput","import React from 'react';\nimport './assets/styles/style.css';\nimport defaultDataset from \"./dataset\"\nimport {AnswersList, Chats, FormDialog} from \"./components/index\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answers: [],\n      chats: [],\n      currentId: \"init\",\n      dataset: defaultDataset,\n      open: false\n    }\n    this.selectAnswer = this.selectAnswer.bind(this)\n\n    this.handleClickOpen = this.handleClickOpen.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  displayNextQuestion = (nextQuestionId) => {\n    const chats = this.state.chats\n    chats.push({\n      text: this.state.dataset[nextQuestionId].question,\n      type: 'question'\n    })\n\n    this.setState({\n      answers: this.state.dataset[nextQuestionId].answers,\n      chats: chats,\n      currentId: nextQuestionId\n    })\n  }\n\n  selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch(true) {\n      case (nextQuestionId === 'init'):\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 500);\n        break;\n\n      case (nextQuestionId === 'contact'):\n        this.handleClickOpen()\n        break;\n\n      case (/^https:*/.test(nextQuestionId)):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank';\n        a.click();\n        break;\n\n      default:\n        const chats = this.state.chats;\n        chats.push({\n          text: selectedAnswer,\n          type: 'answer'\n        })\n\n        this.setState({\n          chats: chats\n        })\n        setTimeout(() => this.displayNextQuestion(nextQuestionId), 1000);\n        break;\n    }\n  }\n\n  handleClickOpen = () => {\n    this.setState({\n      open: true\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false\n    });\n  };\n\n  componentDidMount() {\n    const initAnswer = \"\";\n    this.selectAnswer(initAnswer, this.state.currentId)\n  }\n\n\n  componentDidUpdate(){\n    const scrollArea = document.getElementById(\"scroll-area\")\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={this.state.chats}/>\n          <AnswersList answers={this.state.answers} select={this.selectAnswer} />\n          <FormDialog open={this.state.open} handleClose={this.handleClose} />\n        </div>\n      </section>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}